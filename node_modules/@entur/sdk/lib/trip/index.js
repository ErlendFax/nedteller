"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTripPatterns = getTripPatterns;
exports.getStopPlaceDepartures = getStopPlaceDepartures;
exports.getStopPlacesByPosition = getStopPlacesByPosition;

var _api = require("../api");

var _travelModes = require("../constants/travelModes");

var _query = require("./query");

var _config = require("../config");

var _utils = require("../utils");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

var DEFAULT_SEARCH_PARAMS = {
  arriveBy: false,
  modes: [_travelModes.FOOT, _travelModes.BUS, _travelModes.TRAM, _travelModes.RAIL, _travelModes.METRO, _travelModes.WATER, _travelModes.AIR],
  limit: 5,
  wheelchairAccessible: false
};
var DEFAULT_STOP_PLACE_PARAMS = {
  onForBoarding: false,
  departures: 50,
  timeRange: 72000
};

function getTripPatterns(searchParams) {
  var _getJourneyPlannerHos = (0, _config.getJourneyPlannerHost)(this.config),
      host = _getJourneyPlannerHos.host,
      headers = _getJourneyPlannerHos.headers;

  var _DEFAULT_SEARCH_PARAM = _objectSpread({}, DEFAULT_SEARCH_PARAMS, searchParams),
      searchDate = _DEFAULT_SEARCH_PARAM.searchDate,
      limit = _DEFAULT_SEARCH_PARAM.limit,
      wheelchairAccessible = _DEFAULT_SEARCH_PARAM.wheelchairAccessible,
      rest = _objectWithoutProperties(_DEFAULT_SEARCH_PARAM, ["searchDate", "limit", "wheelchairAccessible"]);

  var url = "".concat(host, "/graphql");

  var variables = _objectSpread({}, rest, {
    dateTime: searchDate.toISOString(),
    numTripPatterns: limit,
    wheelchair: wheelchairAccessible
  });

  var params = {
    query: _query.getItinerariesProps,
    variables: variables
  };
  return (0, _api.post)(url, params, headers).then(function (response) {
    try {
      return response.data.trip.tripPatterns;
    } catch (e) {
      return [];
    }
  });
}

function getStopPlaceDepartures(stopPlaceIds, stopPlaceParams) {
  var _getJourneyPlannerHos2 = (0, _config.getJourneyPlannerHost)(this.config),
      host = _getJourneyPlannerHos2.host,
      headers = _getJourneyPlannerHos2.headers;

  var _DEFAULT_STOP_PLACE_P = _objectSpread({}, DEFAULT_STOP_PLACE_PARAMS, stopPlaceParams),
      timeRange = _DEFAULT_STOP_PLACE_P.timeRange,
      departures = _DEFAULT_STOP_PLACE_P.departures,
      onForBoarding = _DEFAULT_STOP_PLACE_P.onForBoarding;

  var url = "".concat(host, "/graphql");
  var askingForSingleStopPlace = typeof stopPlaceIds === 'string';
  var variables = {
    ids: askingForSingleStopPlace ? [stopPlaceIds] : stopPlaceIds,
    start: new Date().toISOString(),
    range: timeRange,
    departures: departures,
    onForBoarding: onForBoarding
  };
  var params = {
    query: _query.getStopPlaceDeparturesProps,
    variables: variables
  };
  return (0, _api.post)(url, params, headers).then(function (response) {
    if (!response || !response.data) {
      throw new Error("Entur SDK: Could not fetch departures for ids: ".concat(JSON.stringify(stopPlaceIds)));
    }

    var stopPlaces = response.data.stopPlaces || [];

    if (askingForSingleStopPlace) {
      return stopPlaces.length ? stopPlaces[0].estimatedCalls || [] : [];
    }

    return stopPlaces.map(function (_ref) {
      var id = _ref.id,
          estimatedCalls = _ref.estimatedCalls;
      return {
        id: id,
        departures: estimatedCalls
      };
    });
  });
}

function getStopPlacesByPosition(coordinates) {
  var distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;

  var _getJourneyPlannerHos3 = (0, _config.getJourneyPlannerHost)(this.config),
      host = _getJourneyPlannerHos3.host,
      headers = _getJourneyPlannerHos3.headers;

  var url = "".concat(host, "/graphql");
  var variables = (0, _utils.convertPositionToBbox)(coordinates, distance);
  var params = {
    query: _query.getStopPlacesByBboxProps,
    variables: variables
  };
  return (0, _api.post)(url, params, headers).then(function (response) {
    try {
      return response.data.stopPlacesByBbox;
    } catch (e) {
      return [];
    }
  });
}